<?xml version="1.0" encoding="UTF-8"?>
<database xmlns="http://nouveau.freedesktop.org/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://nouveau.freedesktop.org/ rules-ng.xsd">
<import file="copyright.xml"/>

<import file="nvchipsets.xml"/>

<bitset name="G80_CG">
	<!-- curiously, time is actually (this ? this + 1 : 0) -->
	<bitfield low="0" high="5" name="IDLE_TIMEOUT"/>
	<!-- if set, clock gating on idle will be enabled -->
	<bitfield pos="6" name="IDLE_TIMEOUT_ENABLE"/>
	<!-- 7-15 unk -->
	<!-- time between getting reenable signal (enabling the clock) and actually enabling the unit's interfaces -->
	<bitfield low="16" high="19" name="INTERFACE_REENABLE_TIME"/>
	<bitfield low="20" high="23" name="THROTTLE_DUTY_M1"/>
	<!-- delays the gating / interface signals from throttling and reg access - this is in addition to some hw per-module time -->
	<bitfield low="24" high="27" name="DELAY"/>
	<bitfield pos="28" name="CLOCK_THROTTLE_ENABLE"/>
	<bitfield pos="29" name="THROTTLE_MODE">
		<value value="0" name="AUTO"/>
		<value value="1" name="MANUAL"/>
	</bitfield>
	<bitfield pos="30" name="INTERFACE_THROTTLE_ENABLE"/>
	<!-- 31 unk -->
</bitset>

<enum name="g80_mem_target" inline="yes">
	<value value="0" name="VRAM"/>
	<!-- 1 is some other sysram. -->
	<value value="2" name="SYSRAM"/>
	<value value="3" name="SYSRAM_NO_SNOOP"/> <!-- XXX: check -->
</enum>

<bitset name="g80_channel" inline="yes">
	<bitfield high="27" low="0" name="ADDRESS" shr="12"/>
	<bitfield high="29" low="28" name="TARGET" type="g80_mem_target"/>
</bitset>

<domain name="G80_QUERY" size="0x10">
	<reg32 offset="0x0" name="COUNTER"/>
	<reg32 offset="0x4" name="RES"/>
	<reg64 offset="0x8" name="TIME"/>
</domain>

<enum name="G80_VSTATUS" varset="chipset">
	<value value="0" name="IDLE"/> <!-- got nothing to do -->
	<value value="1" name="BUSY"/> <!-- actively doing something -->
	<value value="2" name="UNK2" variants="GF100-"/>
	<value value="3" name="WAITING"/> <!-- has something to do, but waiting for more data or a flush before starting to process -->
	<value value="5" name="BLOCKED"/> <!-- has something to do, but cannot proceed due to full output buffer -->
	<value value="6" name="FAULTED" variants="GF100-"/>
	<value value="7" name="PAUSED"/>
</enum>

<enum name="g80_cond_mode" inline="yes">
	<value value="0" name="NEVER"/>
	<value value="1" name="ALWAYS"/>
	<value value="2" name="RES_NON_ZERO"/>
	<!-- the following two use *two* query objects and check for equality of their COUNTER and RES fields -->
	<value value="3" name="EQUAL"/>
	<value value="4" name="NOT_EQUAL"/>
</enum>

<enum name="g80_reg_mode" inline="yes">
	<brief>selects how $r regs are layed out inside the MP.</brief>
	<value value="0x01" name="PACKED">
		<doc>limits lanes/warp to 16 as a side effect.</doc>
	</value>
	<value value="0x02" name="STRIPED"/>
</enum>

<enum name="g80_msaa_mode" inline="yes">
	<value value="0x00" name="1X1"/>
	<value value="0x01" name="2X1"/>
	<value value="0x02" name="2X2"/>
	<value value="0x03" name="4X2"/>
	<value value="0x04" name="4X2_D3D" varset="chipset" variants="GT215-"/>
	<value value="0x05" name="2X1_D3D" varset="chipset" variants="GT215-"/>
	<value value="0x06" name="4X4" varset="chipset" variants="GF100-"/>
	<value value="0x08" name="2X2_VC_4"/>
	<value value="0x09" name="2X2_VC_12"/>
	<value value="0x0a" name="4X2_VC_8"/>
	<value value="0x0b" name="4X2_VC_24" varset="chipset" variants="GF100-"/>
</enum>

<enum name="G80_TIC_SOURCE">
	<value value="0" name="ZERO"/>
	<value value="2" name="R"/>
	<value value="3" name="G"/>
	<value value="4" name="B"/>
	<value value="5" name="A"/>
	<value value="6" name="ONE_INT"/> <!-- 0x00000001 -->
	<value value="7" name="ONE_FLOAT"/> <!-- 0x3f800000 -->
</enum>

<enum name="G80_TIC_TYPE">
	<value value="1" name="SNORM"/>
	<value value="2" name="UNORM"/>
	<value value="3" name="SINT"/>
	<value value="4" name="UINT"/>
	<value value="5" name="SNORM_FORCE_FP16">
		<doc>native 8/16bit snorm components forced to FP16 format</doc>
	</value>
	<value value="6" name="UNORM_FORCE_FP16">
		<doc>native 8/16bit unorm components forced to FP16 format</doc>
	</value>
	<value value="7" name="FLOAT"/>
</enum>

<enum name="g80_texture_type" inline="yes">
	<value value="0" name="ONE_D"/>
	<value value="1" name="TWO_D"/>
	<value value="2" name="THREE_D"/>
	<value value="3" name="CUBEMAP"/>
	<value value="4" name="ONE_D_ARRAY"/>
	<value value="5" name="TWO_D_ARRAY"/>
	<value value="6" name="ONE_D_BUFFER"/>
	<value value="7" name="TWO_D_NO_MIPMAP"/>
	<value value="8" name="CUBE_ARRAY"/>
</enum>

<enum name="g80_gobs_per_block" inline="yes">
	<value value="0x0" name="ONE"/>
	<value value="0x1" name="TWO"/>
	<value value="0x2" name="FOUR"/>
	<value value="0x3" name="EIGHT"/>
	<value value="0x4" name="SIXTEEN"/>
	<value value="0x5" name="THIRTYTWO"/>
</enum>

<enum name="g80_sector_promotion" inline="yes">
	<value value="0" name="NO_PROMOTION"/>
	<value value="1" name="PROMOTE_TO_2_V"/>
	<value value="2" name="PROMOTE_TO_2_H"/>
	<value value="3" name="PROMOTE_TO_4"/>
</enum>

<enum name="g80_lod_quality" inline="yes">
	<brief>how accurate an estimate of footprint size do we want?</brief>
	<value value="0x0" name="LOW">
		<doc>use 2 vectors for a low quality estimate</doc>
	</value>
	<value value="0x1" name="HIGH">
		<doc>use 4 vectors for a high quality estimate</doc>
	</value>
</enum>

<enum name="g80_aniso_spread_func" inline="yes">
	<doc>rule for bilinear sample (bilerp) spacing during anisotropic filtering. Wider spread &amp; fewer bilerps is typically faster, but lower quality</doc>
	<value value="0" name="HALF">
		<doc>spread = 2^-distance (i.e. spread goes from 1 down to 0.5)</doc>
	</value>
	<value value="1" name="ONE">
		<doc>spread = 1</doc>
	</value>
	<value value="2" name="TWO">
		<doc>2^distance (i.e. spread goes from 1 up to 2)</doc>
	</value>
	<value value="3" name="MAX">
		<doc>spread is increased according to constant error function (i.e. spread goes from 1 up to 8)</doc>
	</value>
</enum>

<enum name="g80_aniso_spread_modifier" inline="yes">
	<value value="0x0" name="NONE">
		<doc>no modification, just sample entire footprint (nv3x)</doc>
	</value>
	<value value="0x1" name="CONST_ONE">
		<doc>force spread = 1 (nv4x)</doc>
	</value>
	<value value="0x2" name="CONST_TWO">
		<doc>force spread = 2</doc>
	</value>
	<value value="0x3" name="SQRT">
		<doc>take sqrt of spread (between nv3x and nv4x)</doc>
	</value>
</enum>

<enum name="g80_max_anisotropy" inline="yes">
	<brief>maximum anisotropic ratio that we filter. Smaller is typically faster but lower quality.</brief>
	<value value="0x0" name="1_TO_1">
		<doc>1:1 aspect ratio (isotropic)</doc>
	</value>
	<value value="0x1" name="2_TO_1">
		<doc>2:1</doc>
	</value>
	<value value="0x2" name="4_TO_1"/>
	<value value="0x3" name="6_TO_1"/>
	<value value="0x4" name="8_TO_1"/>
	<value value="0x5" name="10_TO_1"/>
	<value value="0x6" name="12_TO_1"/>
	<value value="0x7" name="16_TO_1"/>
</enum>

<!--XXX: figure this out someday-->
<enum name="G80_SURFACE_FORMAT">
	<value value="0x001c" name="BITMAP"/>
	<value value="0x001d" name="UNK1D"/>
	<value value="0x00c0" name="RGBA32_FLOAT"/>
	<value value="0x00c1" name="RGBA32_SINT"/>
	<value value="0x00c2" name="RGBA32_UINT"/>
	<value value="0x00c3" name="RGBX32_FLOAT"/>
	<value value="0x00c4" name="RGBX32_SINT"/>
	<value value="0x00c5" name="RGBX32_UINT"/>
	<value value="0x00c6" name="RGBA16_UNORM"/>
	<value value="0x00c7" name="RGBA16_SNORM"/>
	<value value="0x00c8" name="RGBA16_SINT"/>
	<value value="0x00c9" name="RGBA16_UINT"/>
	<value value="0x00ca" name="RGBA16_FLOAT"/>
	<value value="0x00cb" name="RG32_FLOAT"/>
	<value value="0x00cc" name="RG32_SINT"/>
	<value value="0x00cd" name="RG32_UINT"/>
	<value value="0x00ce" name="RGBX16_FLOAT"/>
	<value value="0x00cf" name="BGRA8_UNORM"/>
	<value value="0x00d0" name="BGRA8_SRGB"/>
	<value value="0x00d1" name="RGB10_A2_UNORM"/>
	<value value="0x00d2" name="RGB10_A2_UINT"/>
	<value value="0x00d5" name="RGBA8_UNORM"/>
	<value value="0x00d6" name="RGBA8_SRGB"/>
	<value value="0x00d7" name="RGBA8_SNORM"/>
	<value value="0x00d8" name="RGBA8_SINT"/>
	<value value="0x00d9" name="RGBA8_UINT"/>
	<value value="0x00da" name="RG16_UNORM"/>
	<value value="0x00db" name="RG16_SNORM"/>
	<value value="0x00dc" name="RG16_SINT"/>
	<value value="0x00dd" name="RG16_UINT"/>
	<value value="0x00de" name="RG16_FLOAT"/>
	<value value="0x00df" name="BGR10_A2_UNORM"/>
	<value value="0x00e0" name="R11G11B10_FLOAT"/>
	<value value="0x00e3" name="R32_SINT"/>
	<value value="0x00e4" name="R32_UINT"/>
	<value value="0x00e5" name="R32_FLOAT"/>
	<value value="0x00e6" name="BGRX8_UNORM"/>
	<value value="0x00e7" name="BGRX8_SRGB"/>
	<value value="0x00e8" name="B5G6R5_UNORM"/>
	<value value="0x00e9" name="BGR5_A1_UNORM"/>
	<value value="0x00ea" name="RG8_UNORM"/>
	<value value="0x00eb" name="RG8_SNORM"/>
	<value value="0x00ec" name="RG8_SINT"/>
	<value value="0x00ed" name="RG8_UINT"/>
	<value value="0x00ee" name="R16_UNORM"/>
	<value value="0x00ef" name="R16_SNORM"/>
	<value value="0x00f0" name="R16_SINT"/>
	<value value="0x00f1" name="R16_UINT"/>
	<value value="0x00f2" name="R16_FLOAT"/>
	<value value="0x00f3" name="R8_UNORM"/>
	<value value="0x00f4" name="R8_SNORM"/>
	<value value="0x00f5" name="R8_SINT"/>
	<value value="0x00f6" name="R8_UINT"/>
	<value value="0x00f7" name="A8_UNORM"/>
	<value value="0x00f8" name="BGR5_X1_UNORM"/>
	<value value="0x00f9" name="RGBX8_UNORM"/>
	<value value="0x00fa" name="RGBX8_SRGB"/>
	<value value="0x00fb" name="BGR5_X1_UNORM_UNKFB"/>
	<value value="0x00fc" name="BGR5_X1_UNORM_UNKFC"/>
	<value value="0x00fd" name="BGRX8_UNORM_UNKFD"/>
	<value value="0x00fe" name="BGRX8_UNORM_UNKFE"/>
	<value value="0x00ff" name="Y32_UINT_UNKFF"/>
</enum>

<enum name="G80_ZETA_FORMAT">
	<value value="0x000a" name="Z32_FLOAT"/>
	<value value="0x0013" name="Z16_UNORM" varset="chipset" variants="G200-"/>
	<value value="0x0014" name="S8_Z24_UNORM"/>
	<value value="0x0015" name="Z24_X8_UNORM"/>
	<value value="0x0016" name="Z24_S8_UNORM"/>
	<value value="0x0018" name="Z24_C8_UNORM"/>
	<value value="0x0019" name="Z32_S8_X24_FLOAT"/>
	<value value="0x001d" name="Z24_X8_S8_C8_X16_UNORM"/>
	<value value="0x001e" name="Z32_X8_C8_X16_FLOAT"/>
	<value value="0x001f" name="Z32_S8_C8_X16_FLOAT"/>
</enum>

<enum name="GK104_IMAGE_FORMAT">
	<doc>These are used for the gk104 SUSTP instruction.
	They correspond to the internal format values used for RT formats.
	</doc>
	<value value="0x02" name="RGBA32_FLOAT"/>
	<value value="0x03" name="RGBA32_SINT"/>
	<value value="0x04" name="RGBA32_UINT"/>
	<value value="0x08" name="RGBA16_UNORM"/>
	<value value="0x09" name="RGBA16_SNORM"/>
	<value value="0x0a" name="RGBA16_SINT"/>
	<value value="0x0b" name="RGBA16_UINT"/>
	<value value="0x0c" name="RGBA16_FLOAT"/>
	<value value="0x0d" name="RG32_FLOAT"/>
	<value value="0x0e" name="RG32_SINT"/>
	<value value="0x0f" name="RG32_UINT"/>
	<value value="0x13" name="RGB10_A2_UNORM"/>
	<value value="0x15" name="RGB10_A2_UINT"/>
	<value value="0x18" name="RGBA8_UNORM"/>
	<value value="0x1a" name="RGBA8_SNORM"/>
	<value value="0x1b" name="RGBA8_SINT"/>
	<value value="0x1c" name="RGBA8_UINT"/>
	<value value="0x1d" name="RG16_UNORM"/>
	<value value="0x1e" name="RG16_SNORM"/>
	<value value="0x1f" name="RG16_SINT"/>
	<value value="0x20" name="RG16_UINT"/>
	<value value="0x21" name="RG16_FLOAT"/>
	<value value="0x24" name="R11G11B10_FLOAT"/>
	<value value="0x27" name="R32_SINT"/>
	<value value="0x28" name="R32_UINT"/>
	<value value="0x29" name="R32_FLOAT"/>
	<value value="0x2e" name="RG8_UNORM"/>
	<value value="0x2f" name="RG8_SNORM"/>
	<value value="0x30" name="RG8_SINT"/>
	<value value="0x31" name="RG8_UINT"/>
	<value value="0x32" name="R16_UNORM"/>
	<value value="0x33" name="R16_SNORM"/>
	<value value="0x34" name="R16_SINT"/>
	<value value="0x35" name="R16_UINT"/>
	<value value="0x36" name="R16_FLOAT"/>
	<value value="0x37" name="R8_UNORM"/>
	<value value="0x38" name="R8_SNORM"/>
	<value value="0x39" name="R8_SINT"/>
	<value value="0x3a" name="R8_UINT"/>
</enum>

<enum name="G80_PGRAPH_DATA_ERROR">
	<value value="3" name="INVALID_OPERATION">
		<brief>Any of the following:
		- you used invalid param to QUERY_GET method
		- you used a TIC/TSC entry over TIC/TSC limit
		- you changed STRMOUT parameter without disabling STRMOUT first
		- ...
		</brief>
	</value>
	<value value="4" name="INVALID_VALUE">
		<brief>You used too big / too small / unaligned value.</brief>
	</value>
	<value value="5" name="INVALID_ENUM">
		<brief>Invalid value for an enum bitfield/register.</brief>
	</value>
	<value value="8" name="INVALID_OBJECT">
		<brief>You used object of invalid class as param to one of 0x180-0x1fc methods.</brief>
	</value>
	<value value="9" name="READ_ONLY_OBJECT">
		<brief>You used read-only DMA object for a write-only DMA slot.</brief>
	</value>
	<value value="0xa" name="SUPERVISOR_OBJECT">
		<brief>You tried to bind a DMA object with the SUPERVISOR flag set.</brief>
	</value>
	<value value="0xb" name="INVALID_ADDRESS_ALIGNMENT">
		<brief>One of your addresses is unaligned.</brief>
		<doc>Usually, unaligned addresses trigger INVALID_VALUE
		immediately on the address method. However, sometimes
		[m2mf for example] the required alignment depends on other
		state, and cannot be checked immediately. In this case, you
		instead get this error when you actually try to launch
		something.</doc>
	</value>
	<value value="0xc" name="INVALID_BITFIELD">
		<brief>You had non-0 value in bits not corresponding to any bitfield.</brief>
	</value>
	<value value="0xd" name="BEGIN_END_ACTIVE">
		<brief>You tried changing stuff while begin/end was active.</brief>
	</value>
	<value value="0xe" name="SEMANTIC_COLOR_BACK_OVER_LIMIT">
		<brief>You tried to use a back color slot out of range of VP/GP outputs.</brief>
	</value>
	<value value="0xf" name="VIEWPORT_ID_NEEDS_GP">
		<brief>You tried to enable VIEWPORT_ID without enabling GP.</brief>
	</value>
	<value value="0x10" name="RT_DOUBLE_BIND">
		<brief>You bound more than one set of FP outputs to given RT index.</brief>
	</value>
	<value value="0x11" name="RT_TYPES_MISMATCH">
		<brief>You tried to use blocklinear and pitch RTs simultanously.</brief>
	</value>
	<value value="0x12" name="RT_PITCH_WITH_ZETA">
		<brief>You tried to use pitch RTs with ZETA enabled.</brief>
	</value>
	<value value="0x15" name="FP_TOO_FEW_REGS">
		<brief>You allocated too few registers in FP to cover all outputs.</brief>
	</value>
	<value value="0x16" name="ZETA_FORMAT_CSAA_MISMATCH">
		<brief>You tried to use CSAA with non-CSAA ZETA format, or the other way around.</brief>
	</value>
	<value value="0x17" name="RT_PITCH_WITH_MSAA">
		<brief>You tried to use pitch RTs with MSAA/CSAA enabled.</brief>
	</value>
	<value value="0x18" name="FP_INTERPOLANT_START_OVER_LIMIT">
		<brief>You tried to use a slot out of range of VP/GP outputs for FP interpolant start.</brief>
	</value>
	<value value="0x19" name="SEMANTIC_LAYER_OVER_LIMIT">
		<brief>You tried to use a layer slot out of range of VP/GP outputs.</brief>
	</value>
	<value value="0x1a" name="RT_INVALID_ALIGNMENT">
		<brief>You tried to use blocklinear RT without 0x100-byte alignment.</brief>
	</value>
	<value value="0x1b" name="SAMPLER_OVER_LIMIT">
		<brief>You tried to BIND_TSC a sampler not defined by TEX_LIMITS.</brief>
	</value>
	<value value="0x1c" name="TEXTURE_OVER_LIMIT">
		<brief>You tried to BIND_TIC a texture not defined by TEX_LIMITS.</brief>
	</value>
	<value value="0x1e" name="GP_TOO_MANY_OUTPUTS">
		<brief>You tried to reserve more GP output space than the MP has available.</brief>
	</value>
	<value value="0x1f" name="RT_BPP128_WITH_MS8">
		<brief>You tried to use 8xMSAA with 128bpp RT.</brief>
	</value>
	<value value="0x21" name="Z_OUT_OF_BOUNDS"> <!-- m2mf at least. 2d too? -->
		<brief>Your z coord exceeds the depth of your surface.</brief>
	</value>
	<value value="0x23" name="XY_OUT_OF_BOUNDS"> <!-- m2mf at least. 2d too? -->
		<brief>Your x/y coords exceed the size of your surface.</brief>
	</value>
	<value value="0x24" name="VP_ZERO_INPUTS">
		<brief>You tried to submit vertices with VP input mask (VP_ATTR_EN) set to 0.</brief>
	</value>
	<value value="0x27" name="CP_MORE_PARAMS_THAN_SHARED">
		<brief>You tried to launch block with more params than allocated s[] space.</brief>
	</value>
	<value value="0x28" name="CP_NO_REG_SPACE_STRIPED">
		<brief>You tried to use too much registers per block, and it didn't fit, with striped reg mode.</brief>
	</value>
	<value value="0x29" name="CP_NO_REG_SPACE_PACKED">
		<brief>You tried to use too much registers per block, and it didn't fit, with packed reg mode.</brief>
	</value>
	<value value="0x2a" name="CP_NOT_ENOUGH_WARPS">
		<brief>Your block requires more warps than MP can handle.</brief>
	</value>
	<value value="0x2b" name="CP_BLOCK_SIZE_MISMATCH">
		<brief>The XYZ dimensions of block you specified indicate a smaller block than BLOCK_ALLOC implies.</brief>
	</value>
	<value value="0x2c" name="CP_NOT_ENOUGH_LOCAL_WARPS">
		<brief>Your block requires more warps than LOCAL_WARPS allows..</brief>
	</value>
	<value value="0x2d" name="CP_NOT_ENOUGH_STACK_WARPS">
		<brief>Your block requires more warps than STACK_WARPS allows.</brief>
	</value>
	<value value="0x2e" name="CP_NO_BLOCKDIM_LATCH">
		<brief>Your didn't use BLOCKDIM_LATCH between block dimension setup and kernel launch.</brief>
	</value>
	<value value="0x31" name="ENG2D_FORMAT_MISMATCH"> <!-- sifc at least. -->
		<brief>The dst/src format combination you chose doesn't make sense.</brief>
	</value>
	<value value="0x33" name="ENG2D_OPERATION_ILLEGAL_FOR_DST_FORMAT">
		<brief>The OPERATION isn't possible with the chosen destination format.</brief>
	</value>
	<value value="0x34" name="ENG2D_FORMAT_MISMATCH_B"><!-- happens with the single-component formats -->
		<brief>The dst format chosen is only usable if the src format is the same (simple copy, no conversion).</brief>
	</value>
	<value value="0x3f" name="PRIMITIVE_ID_NEEDS_GP">
		<brief>You tried to enable PRIMITIVE_ID without enabling GP.</brief>
	</value>
	<value value="0x44" name="SEMANTIC_VIEWPORT_OVER_LIMIT">
		<brief>You tried to use a viewport index slot out of range of VP/GP outputs.</brief>
	</value>
	<value value="0x45" name="SEMANTIC_COLOR_FRONT_OVER_LIMIT">
		<brief>You tried to use a front color slot out of range of VP/GP outputs.</brief>
	</value>
	<value value="0x46" name="LAYER_ID_NEEDS_GP">
		<brief>You tried to enable LAYER_ID without enabling GP.</brief>
	</value>
	<value value="0x47" name="SEMANTIC_CLIP_OVER_LIMIT">
		<brief>You tried to use a clip distance slot out of range of VP/GP outputs.</brief>
	</value>
	<value value="0x48" name="SEMANTIC_PTSZ_OVER_LIMIT">
		<brief>You tried to use a point size slot out of range of VP/GP outputs.</brief>
	</value>

	<!-- Are 0x51/0x53 only available on GF100+? -->
	<value value="0x51" name="M2MF_LINE_LENGTH_EXCEEDS_PITCH_IN">
		<brief>You tried to use a line length larger than the pitch of a pitch source.</brief>
	</value>
	<value value="0x53" name="M2MF_LINE_LENGTH_EXCEEDS_PITCH_OUT">
		<brief>You tried to use a line length larger than the pitch of a pitch destination.</brief>
	</value>

	<value value="0x98" name="RT_PITCH_WITH_ZETA_GF100">
		<brief>You tried to use pitch RTs with ZETA enabled.</brief>
	</value>
	<value value="0xa5" name="ENG2D_UNALIGNED_PITCH_GF100">
		<brief>You tried to use a pitch src/dst with pitch not aligned to 128.</brief>
	</value>
</enum>

<enum name="g80_clip_distance_mode" inline="yes">
	<value value="0" name="CLIP"/>
	<value value="1" name="CULL"/>
</enum>

<enum name="g80_mp_pm_mode" inline="yes">
	<value value="0" name="LOGOP"/>
	<value value="1" name="LOGOP_PULSE"/>
</enum>

<enum name="g80_mp_pm_unit" inline="yes">
	<value value="0" name="UNK0"/>
	<value value="1" name="UNK1"/>
	<value value="2" name="UNK2"/>
	<value value="3" name="UNK3"/>
	<value value="4" name="UNK4"/>
	<value value="5" name="UNK5"/>
</enum>

<enum name="gk104_mp_pm_mode" inline="yes">
	<value value="0" name="LOGOP"/>
	<value value="1" name="LOGOP_PULSE"/>
	<value value="2" name="B6"/>
	<value value="3" name="UNK3"/><!-- same as 2 ? -->
	<value value="4" name="LOGOP_B6"/>
	<value value="5" name="LOGOP_B6_PULSE"/>
	<value value="6" name="UNK6"/><!-- same as 4 ? -->
	<value value="7" name="UNK7"/><!-- same as 5 ? -->
	<value value="8" name="UNK8"/><!-- same as 0 ? -->
</enum>

<enum name="gk104_mp_pm_siggroup_a" inline="yes">
	<value value="0x0" name="NONE"/>
	<value value="0x1" name="USER"/><!-- 0..7: prof_trigger_00..07 -->
	<value value="0x3" name="LAUNCH"/><!-- 1: warps_launched; 2..7: threads_launched bits 0..5(1..6) ? -->
	<value value="0x4" name="EXEC"/><!-- 7,6: bits 1,0 of inst_executed -->
	<value value="0x5" name="ISSUE"/><!-- 1,2: inst_issued1,2 -->
	<value value="0x1b" name="LDST"/><!-- 0,1: shared_ld,st; 2,3: local_ld,st; 4,5: gld,gst_request  -->
	<value value="0x1c" name="BRANCH"/><!-- 3: branch; 4: divergent_branch -->
</enum>
<enum name="gk104_mp_pm_siggroup_b" inline="yes">
	<value value="0x0" name="NONE"/>
	<value value="0x2" name="WARP"/><!-- 0: active_cycles; 1..6: active_warps bits 0..5(1..6?); 7: sm_cta_launched -->
	<value value="0x8" name="REPLAY"/><!-- 2,3: shared_replay_ld,st; 4,5: global_mem_divergence_replays_ld,st -->
	<value value="0xe" name="TRANSACTION"/><!-- 0,1: local_transactions_ld,st; 2,3: l1_shared_transactions_ld,st -->
	<value value="0xf" name="UNKOF"/>
	<value value="0x10" name="L1"/><!-- 0,1: l1_local_load_hit,miss; 2,3: l1_local_store_hit,miss; 4,5: l1_global_load_hit,miss  -->
	<value value="0x11" name="MEM"/><!-- 0: uncached_global_load_transaction; 1: global_store_transaction -->
</enum>

</database>
